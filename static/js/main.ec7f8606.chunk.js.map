{"version":3,"sources":["img/Toha.jpg","img/Toha-map.jpg","shaders/fragment.glsl","shaders/vertex.glsl","utils/utils.js","Sketch.js","components/Image/Image.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","loadImgs","urls","callback","imgsPromises","map","url","Promise","resolve","img","Image","src","onload","loadImg","all","then","imgs","Uniform","name","suffix","program","gl","this","location","getUniformLocation","prototype","set","method","values","args","concat","apply","Rect","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","verts","STATIC_DRAW","Float32Array","render","drawArrays","TRIANGLE_STRIP","clamp","number","lower","upper","undefined","console","log","GyroNorm","gn","props","resizeHandler","a1","a2","windowWidth","window","innerWidth","windowHeight","innerHeight","width","container","current","offsetWidth","height","offsetHeight","canvas","ratio","style","imageAspect","uResolution","uRatio","uThreshold","hth","vth","viewport","onMouseMove","e","halfX","halfY","mouseTargetX","clientX","mouseTargetY","clientY","React","createRef","document","createElement","appendChild","getContext","devicePixelRatio","mouseX","mouseY","imageOriginal","main","imageDepth","imageURLs","textures","startTime","Date","getTime","addEventListener","createScene","addTexture","gyro","removeEventListener","source","type","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","Error","getShaderInfoLog","attachShader","createProgram","addShader","vertex","VERTEX_SHADER","fragment","FRAGMENT_SHADER","linkProgram","useProgram","uMouse","uTime","billboard","positionLocation","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","start","bind","images","naturalHeight","naturalWidth","i","length","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","texImage2D","RGBA","UNSIGNED_BYTE","push","u_image0Location","u_image1Location","uniform1i","activeTexture","TEXTURE0","TEXTURE1","resize","renderCanvas","init","gravityNormalized","data","y","do","gamma","x","beta","catch","currentTime","requestAnimationFrame","ref","className","Component","App","MainImg","MapImg","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec7f8606.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Toha.c4ee0dc2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Toha-map.1ca325a7.jpg\";","export default \"#ifdef GL_ES\\n  precision mediump float;\\n#define GLSLIFY 1\\n#endif\\n\\nuniform vec4 resolution;\\nuniform vec2 mouse;\\nuniform vec2 threshold;\\nuniform float time;\\nuniform float pixelRatio;\\nuniform sampler2D image0;\\nuniform sampler2D image1;\\n\\nvec2 mirrored(vec2 v) {\\n  vec2 m = mod(v,2.);\\n  return mix(m,2.0 - m, step(1.0 ,m));\\n}\\n\\nvoid main() {\\n  // uvs and textures\\n  vec2 uv = pixelRatio*gl_FragCoord.xy / resolution.xy ;\\n  vec2 vUv = (uv - vec2(0.5))*resolution.zw + vec2(0.5);\\n  vUv.y = 1. - vUv.y;\\n  vec4 tex1 = texture2D(image1,mirrored(vUv));\\n  vec2 fake3d = vec2(vUv.x + (tex1.r - 0.5)*mouse.x/threshold.x, vUv.y + (tex1.r - 0.5)*mouse.y/threshold.y);\\n  gl_FragColor = texture2D(image0,mirrored(fake3d));\\n}\"","export default \"#define GLSLIFY 1\\nattribute vec2 a_position;\\n\\nvoid main() {\\n  gl_Position = vec4( a_position, 0, 1 );\\n}\"","export const loadImg = (url, resolve) => {\n  const img = new Image();\n  img.src = url;\n  img.onload = () => resolve(img);\n};\n\nexport const loadImgs = (urls, callback) => {\n  const imgsPromises = urls.map(\n    url => new Promise(resolve => loadImg(url, resolve))\n  );\n  Promise.all(imgsPromises).then(imgs => callback(imgs));\n};\n\nexport const Uniform = function(name, suffix, program, gl) {\n  this.name = name;\n  this.suffix = suffix;\n  this.gl = gl;\n  this.program = program;\n  this.location = gl.getUniformLocation(program, name);\n};\n\nUniform.prototype.set = function(...values) {\n  let method = \"uniform\" + this.suffix;\n  let args = [this.location].concat(values);\n  this.gl[method].apply(this.gl, args);\n};\n\n// ----- Rect ----- //\nexport const Rect = function(gl) {\n  const buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, Rect.verts, gl.STATIC_DRAW);\n};\n\nRect.verts = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);\n\nRect.prototype.render = function(gl) {\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n};\n\nexport const clamp = (number, lower, upper) => {\n  if (number === number) {\n    if (upper !== undefined) {\n      number = number <= upper ? number : upper;\n    }\n    if (lower !== undefined) {\n      number = number >= lower ? number : lower;\n    }\n  }\n  return number;\n};\n","import GyroNorm from \"gyronorm\";\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport fragment from \"!!raw-loader!glslify-loader!./shaders/fragment.glsl\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport vertex from \"!!raw-loader!glslify-loader!./shaders/vertex.glsl\";\n\nimport { loadImgs, clamp, Rect, Uniform } from \"./utils/utils\";\n\nconsole.log(GyroNorm);\nconst gn = new GyroNorm();\n\nexport default class Sketch {\n  constructor(MainImg, MapImg) {\n    this.container = document.getElementById(\"gl\");\n    this.canvas = document.createElement(\"canvas\");\n\n    this.container.appendChild(this.canvas);\n    this.gl = this.canvas.getContext(\"webgl\");\n\n    this.ratio = window.devicePixelRatio;\n\n    this.windowWidth = window.innerWidth;\n    this.windowHeight = window.innerHeight;\n\n    this.mouseX = 0;\n    this.mouseY = 0;\n\n    this.mouseTargetX = 0;\n    this.mouseTargetY = 0;\n\n    this.imageOriginal = MainImg;\n    this.imageDepth = MapImg;\n\n    this.vth = 15;\n    this.hth = 35;\n\n    this.imageURLs = [this.imageOriginal, this.imageDepth];\n    this.textures = [];\n\n    // colors\n    // #575757\n    // #787878\n    // #a7a7a7\n    // #b7b7b7\n    // #d6d6d6\n    // #f7f7f7\n\n    this.startTime = new Date().getTime(); // Get start time for animating\n\n    this.createScene();\n    this.addTexture();\n    this.mouseMove();\n    this.gyro();\n  }\n\n  addShader(source, type) {\n    let shader = this.gl.createShader(type);\n    this.gl.shaderSource(shader, source);\n    this.gl.compileShader(shader);\n    let isCompiled = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n    if (!isCompiled) {\n      throw new Error(\n        \"Shader compile error: \" + this.gl.getShaderInfoLog(shader)\n      );\n    }\n    this.gl.attachShader(this.program, shader);\n  }\n\n  resizeHandler() {\n    this.windowWidth = window.innerWidth;\n    this.windowHeight = window.innerHeight;\n    this.width = this.container.offsetWidth;\n    // this.height = this.width/this.aspect;\n    this.height = this.container.offsetHeight;\n\n    this.canvas.width = this.width * this.ratio;\n    this.canvas.height = this.height * this.ratio;\n    this.canvas.style.width = this.width + \"px\";\n    this.canvas.style.height = this.height + \"px\";\n    let a1, a2;\n    if (this.height / this.width < this.imageAspect) {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    } else {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    }\n    this.uResolution.set(this.width, this.height, a1, a2);\n    this.uRatio.set(1 / this.ratio);\n    this.uThreshold.set(this.hth, this.vth);\n    this.gl.viewport(0, 0, this.width * this.ratio, this.height * this.ratio);\n  }\n\n  resize() {\n    this.resizeHandler();\n    window.addEventListener(\"resize\", this.resizeHandler.bind(this));\n  }\n\n  createScene() {\n    // create program\n    this.program = this.gl.createProgram();\n    // add shaders\n    this.addShader(vertex, this.gl.VERTEX_SHADER);\n    this.addShader(fragment, this.gl.FRAGMENT_SHADER);\n    // link & use program\n    this.gl.linkProgram(this.program);\n    this.gl.useProgram(this.program);\n\n    // create fragment uniforms\n    this.uResolution = new Uniform(\"resolution\", \"4f\", this.program, this.gl);\n    this.uMouse = new Uniform(\"mouse\", \"2f\", this.program, this.gl);\n    this.uTime = new Uniform(\"time\", \"1f\", this.program, this.gl);\n    this.uRatio = new Uniform(\"pixelRatio\", \"1f\", this.program, this.gl);\n    this.uThreshold = new Uniform(\"threshold\", \"2f\", this.program, this.gl);\n    // create position attrib\n    this.billboard = new Rect(this.gl);\n    this.positionLocation = this.gl.getAttribLocation(\n      this.program,\n      \"a_position\"\n    );\n    this.gl.enableVertexAttribArray(this.positionLocation);\n    this.gl.vertexAttribPointer(\n      this.positionLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      0,\n      0\n    );\n  }\n\n  addTexture() {\n    let that = this;\n    let gl = that.gl;\n    loadImgs(this.imageURLs, that.start.bind(this));\n  }\n\n  start(images) {\n    let that = this;\n    let gl = that.gl;\n\n    // connect images\n    this.imageAspect = images[0].naturalHeight / images[0].naturalWidth;\n    for (var i = 0; i < images.length; i++) {\n      let texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // Set the parameters so we can render any size image.\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\n      // Upload the image into the texture.\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        images[i]\n      );\n\n      this.textures.push(texture);\n    }\n\n    // lookup the sampler locations.\n    let u_image0Location = this.gl.getUniformLocation(this.program, \"image0\");\n    let u_image1Location = this.gl.getUniformLocation(this.program, \"image1\");\n\n    // set which texture units to render with.\n    this.gl.uniform1i(u_image0Location, 0); // texture unit 0\n    this.gl.uniform1i(u_image1Location, 1); // texture unit 1\n\n    // Set each texture unit to use a particular texture.\n    this.gl.activeTexture(this.gl.TEXTURE0);\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.textures[0]);\n    this.gl.activeTexture(this.gl.TEXTURE1);\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.textures[1]);\n\n    // start application\n    this.resize();\n    this.render();\n  }\n\n  gyro() {\n    let that = this;\n    this.maxTilt = 15;\n\n    gn.init({ gravityNormalized: true })\n      .then(function() {\n        gn.start(function(data) {\n          let y = data.do.gamma;\n          let x = data.do.beta;\n\n          that.mouseTargetY =\n            clamp(x, -that.maxTilt, that.maxTilt) / that.maxTilt;\n          that.mouseTargetX =\n            -clamp(y, -that.maxTilt, that.maxTilt) / that.maxTilt;\n        });\n      })\n      .catch(function(e) {\n        console.log(\"not supported\");\n        // Catch if the DeviceOrientation or DeviceMotion is not supported by the browser or device\n      });\n  }\n\n  mouseMove() {\n    let that = this;\n    document.addEventListener(\"mousemove\", function(e) {\n      let halfX = that.windowWidth / 2;\n      let halfY = that.windowHeight / 2;\n\n      that.mouseTargetX = (halfX - e.clientX) / halfX;\n      that.mouseTargetY = (halfY - e.clientY) / halfY;\n    });\n  }\n\n  render() {\n    let now = new Date().getTime();\n    let currentTime = (now - this.startTime) / 1000;\n\n    this.uTime.set(currentTime);\n    // inertia\n    this.mouseX += (this.mouseTargetX - this.mouseX) * 0.05;\n    this.mouseY += (this.mouseTargetY - this.mouseY) * 0.05;\n\n    this.uMouse.set(this.mouseX, this.mouseY);\n\n    // render\n    this.billboard.render(this.gl);\n    requestAnimationFrame(this.render.bind(this));\n  }\n}\n","import GyroNorm from \"gyronorm\";\n\nimport React from \"react\";\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport fragment from \"!!raw-loader!glslify-loader!shaders/fragment.glsl\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport vertex from \"!!raw-loader!glslify-loader!shaders/vertex.glsl\";\n\nimport { loadImgs, clamp, Rect, Uniform } from \"utils/utils\";\n\nconst gn = new GyroNorm();\n\nexport class Image extends React.Component {\n  constructor(props) {\n    super(props);\n    this.container = React.createRef();\n  }\n\n  componentDidMount() {\n    this.canvas = document.createElement(\"canvas\");\n\n    this.container.current.appendChild(this.canvas);\n    this.gl = this.canvas.getContext(\"webgl\");\n\n    this.ratio = window.devicePixelRatio;\n\n    this.windowWidth = window.innerWidth;\n    this.windowHeight = window.innerHeight;\n\n    this.mouseX = 0;\n    this.mouseY = 0;\n\n    this.mouseTargetX = 0;\n    this.mouseTargetY = 0;\n\n    this.imageOriginal = this.props.main;\n    this.imageDepth = this.props.map;\n\n    this.vth = 15;\n    this.hth = 35;\n\n    this.imageURLs = [this.imageOriginal, this.imageDepth];\n    this.textures = [];\n\n    this.startTime = new Date().getTime(); // Get start time for animating\n\n    document.addEventListener(\"mousemove\", this.onMouseMove);\n    window.addEventListener(\"resize\", this.resizeHandler);\n\n    this.createScene();\n    this.addTexture();\n    this.gyro();\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousemove\", this.onMouseMove);\n    window.removeEventListener(\"resize\", this.resizeHandler);\n  }\n\n  addShader(source, type) {\n    let shader = this.gl.createShader(type);\n    this.gl.shaderSource(shader, source);\n    this.gl.compileShader(shader);\n    let isCompiled = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n    if (!isCompiled) {\n      throw new Error(\n        \"Shader compile error: \" + this.gl.getShaderInfoLog(shader)\n      );\n    }\n    this.gl.attachShader(this.program, shader);\n  }\n\n  resizeHandler = () => {\n    this.windowWidth = window.innerWidth;\n    this.windowHeight = window.innerHeight;\n\n    this.width = this.container.current.offsetWidth;\n    this.height = this.container.current.offsetHeight;\n\n    this.canvas.width = this.width * this.ratio;\n    this.canvas.height = this.height * this.ratio;\n\n    this.canvas.style.width = this.width + \"px\";\n    this.canvas.style.height = this.height + \"px\";\n\n    let a1, a2;\n    if (this.height / this.width < this.imageAspect) {\n      a1 = 1;\n      a2 = this.height / this.width / this.imageAspect;\n    } else {\n      a1 = (this.width / this.height) * this.imageAspect;\n      a2 = 1;\n    }\n\n    this.uResolution.set(this.width, this.height, a1, a2);\n    this.uRatio.set(1 / this.ratio);\n    this.uThreshold.set(this.hth, this.vth);\n    this.gl.viewport(0, 0, this.width * this.ratio, this.height * this.ratio);\n  };\n\n  resize() {\n    this.resizeHandler();\n  }\n\n  createScene() {\n    // create program\n    this.program = this.gl.createProgram();\n    // add shaders\n    this.addShader(vertex, this.gl.VERTEX_SHADER);\n    this.addShader(fragment, this.gl.FRAGMENT_SHADER);\n    // link & use program\n    this.gl.linkProgram(this.program);\n    this.gl.useProgram(this.program);\n\n    // create fragment uniforms\n    this.uResolution = new Uniform(\"resolution\", \"4f\", this.program, this.gl);\n    this.uMouse = new Uniform(\"mouse\", \"2f\", this.program, this.gl);\n    this.uTime = new Uniform(\"time\", \"1f\", this.program, this.gl);\n    this.uRatio = new Uniform(\"pixelRatio\", \"1f\", this.program, this.gl);\n    this.uThreshold = new Uniform(\"threshold\", \"2f\", this.program, this.gl);\n    // create position attrib\n    this.billboard = new Rect(this.gl);\n    this.positionLocation = this.gl.getAttribLocation(\n      this.program,\n      \"a_position\"\n    );\n    this.gl.enableVertexAttribArray(this.positionLocation);\n    this.gl.vertexAttribPointer(\n      this.positionLocation,\n      2,\n      this.gl.FLOAT,\n      false,\n      0,\n      0\n    );\n  }\n\n  addTexture() {\n    let that = this;\n    let gl = that.gl;\n    loadImgs(this.imageURLs, that.start.bind(this));\n  }\n\n  start(images) {\n    let that = this;\n    let gl = that.gl;\n\n    // connect images\n    this.imageAspect = images[0].naturalHeight / images[0].naturalWidth;\n    for (var i = 0; i < images.length; i++) {\n      let texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // Set the parameters so we can render any size image.\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\n      // Upload the image into the texture.\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        images[i]\n      );\n\n      this.textures.push(texture);\n    }\n\n    // lookup the sampler locations.\n    let u_image0Location = this.gl.getUniformLocation(this.program, \"image0\");\n    let u_image1Location = this.gl.getUniformLocation(this.program, \"image1\");\n\n    // set which texture units to render with.\n    this.gl.uniform1i(u_image0Location, 0); // texture unit 0\n    this.gl.uniform1i(u_image1Location, 1); // texture unit 1\n\n    // Set each texture unit to use a particular texture.\n    this.gl.activeTexture(this.gl.TEXTURE0);\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.textures[0]);\n    this.gl.activeTexture(this.gl.TEXTURE1);\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this.textures[1]);\n\n    // start application\n    this.resize();\n    this.renderCanvas();\n  }\n\n  gyro() {\n    const maxTilt = 15;\n\n    gn.init({ gravityNormalized: true })\n      .then(() => {\n        gn.start(function(data) {\n          let y = data.do.gamma;\n          let x = data.do.beta;\n\n          this.mouseTargetY = clamp(x, -maxTilt, maxTilt) / maxTilt;\n          this.mouseTargetX = -clamp(y, -maxTilt, maxTilt) / maxTilt;\n        });\n      })\n      .catch(function(e) {\n        console.log(e);\n        // Catch if the DeviceOrientation or DeviceMotion is not supported by the browser or device\n      });\n  }\n\n  onMouseMove = e => {\n    let halfX = this.windowWidth / 2;\n    let halfY = this.windowHeight / 2;\n\n    this.mouseTargetX = (halfX - e.clientX) / halfX;\n    this.mouseTargetY = (halfY - e.clientY) / halfY;\n  };\n\n  renderCanvas() {\n    let now = new Date().getTime();\n    let currentTime = (now - this.startTime) / 1000;\n\n    this.uTime.set(currentTime);\n    // inertia\n    this.mouseX += (this.mouseTargetX - this.mouseX) * 0.05;\n    this.mouseY += (this.mouseTargetY - this.mouseY) * 0.05;\n\n    this.uMouse.set(this.mouseX, this.mouseY);\n\n    // render\n    this.billboard.render(this.gl);\n    requestAnimationFrame(this.renderCanvas.bind(this));\n  }\n\n  render() {\n    return <div ref={this.container} className=\"img-container\"></div>;\n  }\n}\n","import React from \"react\";\n\nimport Sketch from \"./Sketch\";\n\nimport MainImg from \"./img/Toha.jpg\";\nimport MapImg from \"./img/Toha-map.jpg\";\n\nimport { Image } from \"components/Image\";\n\nimport \"./index.css\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"frame\">\n          <Image main={MainImg} map={MapImg} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}